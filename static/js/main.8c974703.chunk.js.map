{"version":3,"sources":["components/Header.jsx","components/List/ModalWindow.jsx","components/List/Post.jsx","components/List/List.jsx","components/Footer.jsx","App.js","index.js"],"names":["Header","pt","mb","justifyContent","textTransform","fontWeight","fontFamily","fontSize","as","ModalWindow","image","onClose","isOpen","addComment","comments","input","handleChange","handleKeyPress","isComments","length","size","p","templateColumns","gridColumnGap","flexDirection","src","url","onKeyDown","value","onChange","onClick","border","backgroundColor","color","_hover","bg","map","comment","idx","id","date","text","toString","Post","setComments","useDisclosure","onOpen","year","getFullYear","day","getDate","month","getMonth","currentDate","Date","setInput","useState","cursor","alt","e","key","target","List","images","justifyItems","gridRowGap","flex","Footer","borderTop","alignItems","py","App","setImages","useEffect","fetch","then","response","json","data","maxW","px","minH","display","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c974703.chunk.js","sourcesContent":["import { Flex, Heading } from \"@chakra-ui/react\";\n\nexport const Header = () => {\n  return (\n    <Flex pt=\"15px\" mb=\"30px\" justifyContent=\"center\">\n      <Heading\n        textTransform=\"uppercase\"\n        fontWeight=\"400\"\n        fontFamily=\"Roboto\"\n        fontSize=\"36\"\n        as=\"h1\"\n      >\n        Test App\n      </Heading>\n    </Flex>\n  );\n};\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalBody,\n  ModalCloseButton,\n  Flex,\n  Box,\n  Grid,\n  Button,\n  Image,\n  Input,\n} from \"@chakra-ui/react\";\n\nexport const ModalWindow = ({\n  image,\n  onClose,\n  isOpen,\n  addComment,\n  comments,\n  input,\n  handleChange,\n  handleKeyPress,\n}) => {\n  const isComments = comments.length > 0;\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} size=\"xl\">\n      <ModalOverlay />\n      <ModalContent>\n        <ModalCloseButton />\n\n        <ModalBody p=\"30px\">\n          <Grid\n            templateColumns=\"331px 190px\"\n            gridColumnGap=\"14px\"\n            fontFamily=\"Roboto\"\n            fontSize=\"13px\"\n          >\n            <Flex flexDirection=\"column\">\n              <Image src={image.url} mb=\"30px\" />\n\n              <Flex flexDirection=\"column\">\n                <Input\n                  onKeyDown={handleKeyPress}\n                  value={input}\n                  onChange={handleChange}\n                  mb=\"19px\"\n                />\n                <Button\n                  onClick={addComment}\n                  border=\"1px solid #4997D0\"\n                  backgroundColor=\"#4997D0\"\n                  color=\"#fff\"\n                  _hover={{ bg: \"#fff\", color: \"#4997D0\" }}\n                >\n                  Оставить комментарий\n                </Button>\n              </Flex>\n            </Flex>\n\n            <Flex flexDirection=\"column\">\n              <Box>\n                {isComments ? (\n                  comments.map((comment, idx) => {\n                    return comment.id === image.id ? (\n                      <Box key={idx.toString()} mb=\"20px\">\n                        <Box as=\"time\" color=\"#999\">\n                          {comment.date}\n                        </Box>\n                        <Box as=\"p\">{comment.text}</Box>\n                      </Box>\n                    ) : null;\n                  })\n                ) : (\n                  <Box as=\"p\" color=\"#999\">\n                    Комментарии отсутствуют\n                  </Box>\n                )}\n              </Box>\n            </Flex>\n          </Grid>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import { Box, Image, useDisclosure } from \"@chakra-ui/react\";\nimport { useState } from \"react\";\n\nimport { ModalWindow } from \"./ModalWindow\";\n\nexport const Post = ({ image, setComments, comments }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const addComment = () => {\n    if (input) {\n      setComments([\n        ...comments,\n        {\n          id: image.id,\n          text: input,\n          date: currentDate(new Date()),\n        },\n      ]);\n    }\n\n    function currentDate(date) {\n      const year = date.getFullYear();\n      const day = date.getDate();\n      const month = date.getMonth();\n\n      return `${day < 10 ? \"0\" + day : day}.${\n        month < 10 ? \"0\" + month : month\n      }.${year}`;\n    }\n\n    setInput(\"\");\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\") addComment();\n  };\n\n  const [input, setInput] = useState(\"\");\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  return (\n    <Box onClick={onOpen} cursor=\"pointer\" key={image.id}>\n      <Image src={image.url} alt=\"\" />\n      <ModalWindow\n        handleKeyPress={handleKeyPress}\n        handleChange={handleChange}\n        input={input}\n        addComment={addComment}\n        setComments={setComments}\n        comments={comments}\n        onClose={onClose}\n        isOpen={isOpen}\n        image={image}\n      />\n    </Box>\n  );\n};\n","import { Grid } from \"@chakra-ui/react\";\n\nimport { Post } from \"./Post\";\n\nexport const List = ({ images, comments, setComments }) => {\n  return (\n    <Grid\n      templateColumns=\"repeat(auto-fit, minmax(229px, 1fr))\"\n      justifyItems=\"center\"\n      gridColumnGap=\"21px\"\n      gridRowGap=\"30px\"\n      flex=\"1 1 auto\"\n    >\n      {images.map((image) => {\n        return (\n          <Post\n            comments={comments}\n            setComments={setComments}\n            images={images}\n            key={image.id}\n            image={image}\n          />\n        );\n      })}\n    </Grid>\n  );\n};\n","import { Box, Flex } from \"@chakra-ui/layout\";\n\nexport const Footer = () => {\n  return (\n    <Box borderTop=\"1px solid #ccc\" as=\"footer\">\n      <Flex justifyContent=\"center\" alignItems=\"center\">\n        <Box fontFamily=\"Roboto\" color=\"#ccc\" py=\"20px\" as=\"p\">\n          © 2021\n        </Box>\n      </Flex>\n    </Box>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { Container } from \"@chakra-ui/react\";\n\nimport { Header } from \"./components/Header\";\nimport { List } from \"./components/List/List\";\nimport { Footer } from \"./components/Footer\";\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://boiling-refuge-66454.herokuapp.com/images\")\n      .then(response => response.json())\n      .then(data => setImages(data));\n  }, [setImages]);\n\n  return (\n    <Container\n      maxW=\"760px\"\n      px=\"15px\"\n      minH=\"100vh\"\n      display=\"flex\"\n      flexDirection=\"column\"\n    >\n      <Header />\n      <List comments={comments} setComments={setComments} images={images} />\n      <Footer />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}